openapi: 3.0.3
info:
  contact:
    email: api.inquiry@expert.ai
    name: expert.ai
    url: 'https://expert.ai/'
  description: >
    The GeoTax document classification module of the expert.ai Natural Language API detects the citations of geographic places in a text and returns the corresponding countries.<br />
    The Natural Language API has its general contract (https://github.com/therealexpertai/nlapi-openapi-specification/blob/master/nlapi.yaml) specifying how to use the classification module to obtain countries' names a categories; this specific sub-contract specifies how to use the same classification module to obtain equivalent GeoJOSN data that can be used in a GIS (Geographic Information System), for example to highlight in a map the countries the text is about.
  title: expert.ai Natural Language API - GeoJSON classification
  version: v2
servers:
  - url: 'https://nlapi.expert.ai/v2'
paths:
  /categorize/geotax/{language}:
    post:
      description: GeoJSON classification of the posted text
      parameters:
       - description: Document language (code); use the `taxonomies` resource of the expert.ai Natural Language API to discover the languages that the classification module supports
         in: path
         name: language
         required: true
         schema:
           type: string
           enum:
             - de
             - en
             - es
             - fr
             - it
       - description: Classification features, specify `extradata` to obtain GeoJSON data
         in: query
         name: features
         required: true
         schema:
           type: string
           enum:
             - extradata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisRequest'
        description: The document to be classified
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoTaxResponse'
          description: Resource response
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
        '500':
          description: Internal Server Error
      security:
        - bearerAuth: []
      summary: Classification
      tags:
        - Document Classification
components:
  schemas:
    GeoTaxResponse:
      description: Resource response
      properties:
        success:
          description: Operation completed successfully (true/false)
          type: boolean
        errors:
          description: Service errors
          type: array
          items:
            $ref: '#/components/schemas/ServiceError'
        data:
          $ref: '#/components/schemas/GeoTaxDocument'
    GeoTaxDocument:
      description: Classification results
      properties:
        version:
          description: Service version
          type: string
        language:
          description: Text language
          type: string
        categories:
          description: Categories
          type: array
          items:
            $ref: '#/components/schemas/Category'
        extraData:
          description: Extra-data containing GeoJSON data
          properties:
            geojson:
              $ref: '#/components/schemas/geoJsonBase'
    geoJsonBase:
        description: >
          This schema is solely an abstract definition to share the common GeoJSON
          attributes to the concrete GeoJSON types.
        type: object
        properties:
          type:
            $ref: '#/components/schemas/geoJsonType'
          bbox:
            $ref: '#/components/schemas/boundingBox'
        required: [ type ]
    position:
      title: Position
      type: array
      description: >-
        A position is the fundamental geometry construct. The `coordinates`
        member of a geometry object is composed of one position (in the case
        of a Point geometry), an array of positions (LineString or MultiPoint
        geometries), an array of arrays of positions (Polygons,
        MultiLineStrings), or a multidimensional array of positions
        (MultiPolygon).
        A position is represented by an array of numbers. There must be at
        least two elements, and may be more. The order of elements must
        follow x, y, z order (easting, northing, altitude for coordinates in
        a projected coordinate reference system, or longitude, latitude,
        altitude for coordinates in a geographic coordinate reference
        system). Any number of additional elements are allowed --
        interpretation and meaning of additional elements is beyond the scope
        of this specification.
      minItems: 2
      maxItems: 3
      items:
        type: number
    point:
      title: Point
      description: >
        For type `Point`, the `coordinates` member must be a single position.
      type: object
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: '#/components/schemas/pointCoordinates'
      allOf:
        - $ref: '#/components/schemas/locatedGeometryBase'
    multiPoint:
      title: Multi-Point
      description: >
        The `MultiPoint` geometry type has a `coordinates` member must be an array
        of positions.
      type: object
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          $ref: '#/components/schemas/multiPointCoordinates'
      allOf:
        - $ref: '#/components/schemas/locatedGeometryBase'
    lineString:
      title: Line String
      description: >-
        For type `LineString`, the `coordinates` member must be an array of
        two or more positions.
        A LinearRing is closed LineString with 4 or more positions. The first
        and last positions are equivalent (they represent equivalent points).
        Though a LinearRing is not explicitly represented as a GeoJSON
        geometry type, it is referred to in the Polygon geometry type
        definition.
      type: object
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          $ref: '#/components/schemas/lineStringCoordinates'
      allOf:
        - $ref: '#/components/schemas/locatedGeometryBase'
    multiLineString:
      title: MultiLineString
      description: >
        For type `MultiLineString`, the `coordinates` member must be an array of
        LineString coordinate arrays.
      type: object
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          $ref: '#/components/schemas/multiLineStringCoordinates'
      allOf:
        - $ref: '#/components/schemas/locatedGeometryBase'
    polygon:
      title: Polygon
      description: >
        For type `Polygon`, the `coordinates` member must be an array of
        LinearRing coordinate arrays. For Polygons with multiple rings, the first
        must be the exterior ring and any others must be interior rings or holes.
      type: object
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          $ref: '#/components/schemas/polygonCoordinates'
      allOf:
        - $ref: '#/components/schemas/locatedGeometryBase'
    multiPolygon:
      title: Multi-Polygon Geometry
      description: >
        For type `MultiPolygon`, the `coordinates` member must be an array of
        Polygon coordinate arrays.
      type: object
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          $ref: "#/components/schemas/multiPolygonCoordinates"
      allOf:
        - $ref: '#/components/schemas/locatedGeometryBase'
    geometryCollection:
      title: Geometry Collection
      description: >-
        A GeoJSON object with type `GeometryCollection` is a geometry object
        which represents a collection of geometry objects.
        A geometry collection must have a member with the name `geometries`.
        The value corresponding to `geometries` is an array. Each element in
        this array is a GeoJSON geometry object.
      type: object
      properties:
        type:
          type: string
          enum:
            - GeometryCollection
        geometries:
          title: Geometries
          type: array
          items:
            $ref: '#/components/schemas/geometryObject'
      required: [ geometries ]
      allOf:
        - $ref: '#/components/schemas/geoJsonBase'
    feature:
      title: Feature
      description: >-
        A GeoJSON object with the type `Feature` is a feature object.
        * A feature object must have a member with the name `geometry`. The
        value of the geometry member is a geometry object as defined above or
        a JSON null value.
        * A feature object must have a member with the name `properties`. The
        value of the properties member is an object (any JSON object or
        a JSON null value).
        * If a feature has a commonly used identifier, that identifier should
        be included as a member of the feature object with the name `id`.
      type: object
      required:
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          title: Feature Geometry
          description: >
            The `geometry` member specifies the location Geometry Object of the
            feature.  If the feature has no location, the value should be null.
          allOf:
            - type: object
              nullable: true
            - $ref: '#/components/schemas/geometryObject'
        properties:
          title: Feature Properties
          description: >
            The `properties` member is an object containing application-specific
            attributes of the feature.
          type: object
          nullable: true
        id:
          description: >
            The `id` member is an optional, commonly used identifier of the
            feature.
          oneOf:
            - type: string
            - type: number
      allOf:
        - $ref: '#/components/schemas/geoJsonBase'
    featureCollection:
      title: Feature Collection
      description: >-
        A GeoJSON object with the type `FeatureCollection` is a feature
        collection object.
        An object of type `FeatureCollection` must have a member with the
        name `features`. The value corresponding to `features` is an array.
        Each element in the array is a feature object as defined above.
      required: [ features ]
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          title: Features
          type: array
          items:
            $ref: '#/components/schemas/feature'
      allOf:
        - $ref: '#/components/schemas/geoJsonBase'
    boundingBox:
      title: Bounding Box
      type: array
      description: >
        To include information on the coordinate range for geometries, features,
        or feature collections, a GeoJSON object may have a member named `bbox`.
        The value of the bbox member must be a 2*n array where n is the number of
        dimensions represented in the contained geometries, with the lowest
        values for all axes followed by the highest values. The axes order of a
        bbox follows the axes order of geometries. In addition, the coordinate
        reference system for the bbox is assumed to match the coordinate
        reference system of the GeoJSON object of which it is a member.
      minItems: 4
      items:
        type: number
    coordinates:
      title: Coordinates
      # must be anyOf, not oneOf because instances of polygonCoordinates also
      # satisfy lineStringCoordinates
      anyOf:
        - $ref: '#/components/schemas/pointCoordinates'
        - $ref: '#/components/schemas/lineStringCoordinates'
        - $ref: '#/components/schemas/polygonCoordinates'
        - $ref: '#/components/schemas/multiPointCoordinates'
        - $ref: '#/components/schemas/multiLineStringCoordinates'
        - $ref: '#/components/schemas/multiPolygonCoordinates'
    locatedGeometryBase:
      description: >
        This schema defines the shared attributes of all the Geometry Object
        types that have a `coordinates` member specifying the location(s) of the
        geometry.  This schema is solely an abstract definition to share common
        characteristics to the concrete Geometry Object types.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/locatedGeometryType'
        coordinates:
          $ref: '#/components/schemas/coordinates'
      required: [ type, coordinates ]
      allOf:
        - $ref: '#/components/schemas/geoJsonBase'
    locatedGeometryObject:
      title: Located Geometry Object
      description: >
        This type includes the GeoJSON Geometry Objects that include a
        `coordinates` member specifying a location.  This simply excludes the
        GeometryCollection object.  This schema restricts the range of concrete
        Geometry Object types to those the GeoJSON specification defines.
      oneOf:
        - $ref: '#/components/schemas/point'
        - $ref: '#/components/schemas/multiPoint'
        - $ref: '#/components/schemas/lineString'
        - $ref: '#/components/schemas/multiLineString'
        - $ref: '#/components/schemas/polygon'
        - $ref: '#/components/schemas/multiPolygon'
    geometryObject:
      title: Geometry Object
      description: >
        A `GeometryObject` is a GeoJSON object wnose `type` member value is one of
        the following strings: `Point`, `MultiPoint`, `LineString`,
        `MultiLineString`, `Polygon`, `MultiPolygon`, or `GeometryCollection`.
        All geometry object types except `GeometryCollection` must have a
        `coordinates` member.
      oneOf:
        - $ref: '#/components/schemas/locatedGeometryObject'
        - $ref: '#/components/schemas/geometryCollection'
    pointCoordinates:
      title: Point Coordinates
      $ref: '#/components/schemas/position'
    multiPointCoordinates:
      type: array
      items:
        $ref: '#/components/schemas/pointCoordinates'
    lineStringCoordinates:
      title: Line String Coordinates
      description: >
        For type `LineString`, the `coordinates` member must be an array of two
        or more positions.
      type: array
      minItems: 2
      items:
        $ref: '#/components/schemas/position'
    multiLineStringCoordinates:
      type: array
      items:
        $ref: '#/components/schemas/lineStringCoordinates'
    linearRingCoordinates:
      title: Linear Ring Coordinates
      description: >
        A LinearRing is a closed LineString with 4 or more positions. The first
        and last positions are equivalent (they represent equivalent points).
        Though a LinearRing is not explicitly represented as a GeoJSON geometry
        type, it is referenced in the Polygon geometry type definition.  Note
        that JSON Schema cannot express the constraint that the first and last
        position of a LinearRing must be equivalent, so instances that are valid
        with respect to this schema may not actually be valid with respect to the
        GeoJSON specification.
      type: array
      minItems: 4
      items:
        $ref: '#/components/schemas/position'
    polygonCoordinates:
      title: Polygon Coordinates
      description: >
        For type `Polygon`, the `coordinates` member must be an array of
        LinearRing coordinate arrays. For Polygons with multiple rings, the first
        must be the exterior ring and any others must be interior rings or holes.
      type: array
      items:
        $ref: '#/components/schemas/linearRingCoordinates'
    multiPolygonCoordinates:
      type: array
      items:
        $ref: '#/components/schemas/polygonCoordinates'
    locatedGeometryType:
      description: >
        This type enumerates the GeoJSON geometry types that have a coordinates
        member to specify a location.  This simply excludes the
        `GeometryCollection` geometry type.
      type: string
      enum:
        - Point
        - LineString
        - Polygon
        - MultiPoint
        - MultiLineString
        - MultiPolygon
    geometryType:
      type: string
      oneOf:
        - $ref: '#/components/schemas/locatedGeometryType'
        - type: string
          enum: [ GeometryCollection ]
    containerType:
      type: string
      enum: [ Feature, FeatureCollection ]
    geoJsonType:
      type: string
      oneOf:
        - $ref: '#/components/schemas/geometryType'
        - $ref: '#/components/schemas/containerType'     
    AnalysisRequest:
      description: Request
      properties:
        document:
          $ref: '#/components/schemas/Document'
    Document:
      description: Document
      properties:
        text:
          description: The document's text
          type: string
    DocumentPosition:
      description: Position
      properties:
        start:
          description: Zero-based position of the first character
          format: int64
          type: integer
        end:
          description: Zero-based position of the character after the last
          format: int64
          type: integer
    ServiceError:
      description: Error information
      properties:
        code:
          description: Error code
          type: string
        message:
          description: Error message
          type: string
    CategorizeResponse:
      description: Classification resource response
      properties:
        success:
          description: Operation completed successfully (true/false)
          type: boolean
        errors:
          description: Service errors
          type: array
          items:
            $ref: '#/components/schemas/ServiceError'
        data:
          $ref: '#/components/schemas/CategorizeDocument'
    Category:
      description: Category
      properties:
        id:
          description: Category ID
          type: string
        label:
          description: Category label
          type: string
        hierarchy:
          description: Hierarchical path
          type: array
          items:
            type: string
        score:
          description: Score assigned to the category to represent its relevance
          format: int32
          minimum: 0
          type: integer
        winner:
          description: True if the category is deemed particularly relevant
          type: boolean
        namespace:
          description: Name of the software package containing the reference taxonomy
          type: string
        frequency:
          description: >-
            Score expressed as a percentage of the sum of the scores of all the
            candidate categories, winners and not (see the **score** property)
          format: float
          maximum: 100
          minimum: 0
          type: number
        positions:
          description: >-
            Positions of the portions of text that contributed to the selection
            of the category
          type: array
          items:
            $ref: '#/components/schemas/DocumentPosition'
    CategorizeDocument:
      description: Categorization data
      properties:
        version:
          description: Service version
          type: string
        language:
          description: Text language
          type: string
        categories:
          description: Categories
          type: array
          items:
            $ref: '#/components/schemas/Category'
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
